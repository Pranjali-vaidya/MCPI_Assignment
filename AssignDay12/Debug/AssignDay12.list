
AssignDay12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800055c  0800055c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  0800055c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0000155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000560  08000560  00001560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000564  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014d0  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e4  00000000  00000000  000034fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  000039e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180c9  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013d3  00000000  00000000  0001bc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd2f  00000000  00000000  0001cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8d17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001ac  00000000  00000000  000a8d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  000a8f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000544 	.word	0x08000544

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000544 	.word	0x08000544

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	int16_t ccr;
	SystemInit();
 800021e:	f000 f90d 	bl	800043c <SystemInit>
	PWM_Init();
 8000222:	f000 f841 	bl	80002a8 <PWM_Init>
	SwitchInit();
 8000226:	f000 f8c1 	bl	80003ac <SwitchInit>
	ccr = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	80fb      	strh	r3, [r7, #6]
	//volatile uint32_t SwitchExtiFlag = 0;
	while(1) {

		while(ccr <= 100)
 800022e:	e031      	b.n	8000294 <main+0x7c>
		{
			START:
			TIM8->CCR1 = ccr;
 8000230:	4a1b      	ldr	r2, [pc, #108]	@ (80002a0 <main+0x88>)
 8000232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000236:	6353      	str	r3, [r2, #52]	@ 0x34
			DelayMs(100);
 8000238:	2064      	movs	r0, #100	@ 0x64
 800023a:	f7ff ffc5 	bl	80001c8 <DelayMs>
			if(SwitchExtiFlag == 1)
 800023e:	4b19      	ldr	r3, [pc, #100]	@ (80002a4 <main+0x8c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b01      	cmp	r3, #1
 8000244:	d106      	bne.n	8000254 <main+0x3c>
			{
			//DelayMs(1000);
			ccr += 10;
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	330a      	adds	r3, #10
 800024a:	b29b      	uxth	r3, r3
 800024c:	80fb      	strh	r3, [r7, #6]
			SwitchExtiFlag = 0;
 800024e:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <main+0x8c>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
			}
			if(ccr == 100)
 8000254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000258:	2b64      	cmp	r3, #100	@ 0x64
 800025a:	d11b      	bne.n	8000294 <main+0x7c>
			{
				while(ccr <= 100){
 800025c:	e016      	b.n	800028c <main+0x74>
				TIM8->CCR1 = ccr;
 800025e:	4a10      	ldr	r2, [pc, #64]	@ (80002a0 <main+0x88>)
 8000260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000264:	6353      	str	r3, [r2, #52]	@ 0x34
				DelayMs(100);
 8000266:	2064      	movs	r0, #100	@ 0x64
 8000268:	f7ff ffae 	bl	80001c8 <DelayMs>
				if(SwitchExtiFlag == 1)
 800026c:	4b0d      	ldr	r3, [pc, #52]	@ (80002a4 <main+0x8c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d10b      	bne.n	800028c <main+0x74>
				{
					ccr -= 10;
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	3b0a      	subs	r3, #10
 8000278:	b29b      	uxth	r3, r3
 800027a:	80fb      	strh	r3, [r7, #6]
					SwitchExtiFlag = 0;
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <main+0x8c>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
					if (ccr == 0)
 8000282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d100      	bne.n	800028c <main+0x74>
						goto START;
 800028a:	e7d1      	b.n	8000230 <main+0x18>
				while(ccr <= 100){
 800028c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000290:	2b64      	cmp	r3, #100	@ 0x64
 8000292:	dde4      	ble.n	800025e <main+0x46>
		while(ccr <= 100)
 8000294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000298:	2b64      	cmp	r3, #100	@ 0x64
 800029a:	dcfb      	bgt.n	8000294 <main+0x7c>
			START:
 800029c:	bf00      	nop
 800029e:	e7c7      	b.n	8000230 <main+0x18>
 80002a0:	40010400 	.word	0x40010400
 80002a4:	20000020 	.word	0x20000020

080002a8 <PWM_Init>:
Date: Oct 1, 2024
*/

#include "pwm.h"

void PWM_Init(void) {
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	// GPIO PC6 as Timer Channel TIM8 CH1
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000368 <PWM_Init+0xc0>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000368 <PWM_Init+0xc0>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC->MODER |= BV(6*2+1);
 80002b8:	4b2c      	ldr	r3, [pc, #176]	@ (800036c <PWM_Init+0xc4>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a2b      	ldr	r2, [pc, #172]	@ (800036c <PWM_Init+0xc4>)
 80002be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~BV(6*2);
 80002c4:	4b29      	ldr	r3, [pc, #164]	@ (800036c <PWM_Init+0xc4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a28      	ldr	r2, [pc, #160]	@ (800036c <PWM_Init+0xc4>)
 80002ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= BV(24) | BV(25);
 80002d0:	4b26      	ldr	r3, [pc, #152]	@ (800036c <PWM_Init+0xc4>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a25      	ldr	r2, [pc, #148]	@ (800036c <PWM_Init+0xc4>)
 80002d6:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80002da:	6213      	str	r3, [r2, #32]

	// PWM Setup
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 80002dc:	4b22      	ldr	r3, [pc, #136]	@ (8000368 <PWM_Init+0xc0>)
 80002de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e0:	4a21      	ldr	r2, [pc, #132]	@ (8000368 <PWM_Init+0xc0>)
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	6453      	str	r3, [r2, #68]	@ 0x44
	//1. Setup PWM clock (10 KHz to 100 KHz). Program the period (ARR) and the duty cycle (CCR) respectively in ARR and CCRx registers.
	//	* PCLK = 16MHz, PSC = 16 --> TCLK = 1MHz
	//	* ARR = 100 => PWM output freq = TCLK / ARR = 1 MHz / 100 = 10 KHz
	TIM8->ARR = ARR_Val;
 80002e8:	4b21      	ldr	r3, [pc, #132]	@ (8000370 <PWM_Init+0xc8>)
 80002ea:	2264      	movs	r2, #100	@ 0x64
 80002ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	//	* CCR = 0 => 0% Duty Cycle
	TIM8->CCR1 = 0;
 80002ee:	4b20      	ldr	r3, [pc, #128]	@ (8000370 <PWM_Init+0xc8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	635a      	str	r2, [r3, #52]	@ 0x34
	//2. Configure the output pin:
	//	* Select the output mode by writing CCS bits (00 = output) in CCMRx register.
	TIM8->CCMR1 &= ~(TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC1S_1);
 80002f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000370 <PWM_Init+0xc8>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000370 <PWM_Init+0xc8>)
 80002fa:	f023 0303 	bic.w	r3, r3, #3
 80002fe:	6193      	str	r3, [r2, #24]
	//	* Select the polarity by writing the CCxP bit (0 = active high) in CCER register.
	TIM8->CCER &= ~TIM_CCER_CC1P;
 8000300:	4b1b      	ldr	r3, [pc, #108]	@ (8000370 <PWM_Init+0xc8>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a1a      	ldr	r2, [pc, #104]	@ (8000370 <PWM_Init+0xc8>)
 8000306:	f023 0302 	bic.w	r3, r3, #2
 800030a:	6213      	str	r3, [r2, #32]
	//3. Select the PWM mode (PWM1 or PWM2) by writing OCxM bits in CCMRx register.
	//	* The PWM mode can be selected independently on each channel (one PWM per OCx output) by writing 110 (PWM mode 1) or 111 (PWM mode 2) in the TIMx_CCMRx register.
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800030c:	4b18      	ldr	r3, [pc, #96]	@ (8000370 <PWM_Init+0xc8>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a17      	ldr	r2, [pc, #92]	@ (8000370 <PWM_Init+0xc8>)
 8000312:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000316:	6193      	str	r3, [r2, #24]
	//4. Set the preload bit in CCMRx register and the ARPE bit in the CR1 register.
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000318:	4b15      	ldr	r3, [pc, #84]	@ (8000370 <PWM_Init+0xc8>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a14      	ldr	r2, [pc, #80]	@ (8000370 <PWM_Init+0xc8>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6193      	str	r3, [r2, #24]
	TIM8->CR1 |= TIM_CR1_ARPE;
 8000324:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <PWM_Init+0xc8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a11      	ldr	r2, [pc, #68]	@ (8000370 <PWM_Init+0xc8>)
 800032a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800032e:	6013      	str	r3, [r2, #0]
	//5. Select the counting mode in CR1:
	//	* PWM edge-aligned mode (00): the counter must be configured up-counting or down-counting.
	TIM8->CR1 &= ~(TIM_CR1_CMS_0 | TIM_CR1_CMS_1);
 8000330:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <PWM_Init+0xc8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0e      	ldr	r2, [pc, #56]	@ (8000370 <PWM_Init+0xc8>)
 8000336:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800033a:	6013      	str	r3, [r2, #0]
	//	* PWM center aligned mode: the counter mode must be center aligned counting mode (CMS bits different from '00').
	//6. Enable the capture compare in CCER.
	TIM8->CCER |= TIM_CCER_CC1E;
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <PWM_Init+0xc8>)
 800033e:	6a1b      	ldr	r3, [r3, #32]
 8000340:	4a0b      	ldr	r2, [pc, #44]	@ (8000370 <PWM_Init+0xc8>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6213      	str	r3, [r2, #32]
	//7. Enable main output in BDTR and Enable the counter.
	TIM8->BDTR |= TIM_BDTR_MOE;
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <PWM_Init+0xc8>)
 800034a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800034c:	4a08      	ldr	r2, [pc, #32]	@ (8000370 <PWM_Init+0xc8>)
 800034e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000352:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM8->CR1 |= TIM_CR1_CEN;
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <PWM_Init+0xc8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a05      	ldr	r2, [pc, #20]	@ (8000370 <PWM_Init+0xc8>)
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40023800 	.word	0x40023800
 800036c:	40020800 	.word	0x40020800
 8000370:	40010400 	.word	0x40010400

08000374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	2b00      	cmp	r3, #0
 8000384:	db0b      	blt.n	800039e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	f003 021f 	and.w	r2, r3, #31
 800038c:	4906      	ldr	r1, [pc, #24]	@ (80003a8 <__NVIC_EnableIRQ+0x34>)
 800038e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000392:	095b      	lsrs	r3, r3, #5
 8000394:	2001      	movs	r0, #1
 8000396:	fa00 f202 	lsl.w	r2, r0, r2
 800039a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	e000e100 	.word	0xe000e100

080003ac <SwitchInit>:
Date: Sep 21, 2024
*/

#include "switch_intr.h"

void SwitchInit(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	// Enable GPIO clock
    RCC->AHB1ENR |= BV(SWITCH_GPIO_CLKEN);
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <SwitchInit+0x58>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	4a13      	ldr	r2, [pc, #76]	@ (8000404 <SwitchInit+0x58>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6313      	str	r3, [r2, #48]	@ 0x30
	// Set gpio mode as input
    GPIOA->MODER &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <SwitchInit+0x5c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a11      	ldr	r2, [pc, #68]	@ (8000408 <SwitchInit+0x5c>)
 80003c2:	f023 0303 	bic.w	r3, r3, #3
 80003c6:	6013      	str	r3, [r2, #0]
	// set no pull-up pull-down registers
    GPIOA->PUPDR &= ~(BV(SWITCH_PIN*2+1) | BV(SWITCH_PIN*2));
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <SwitchInit+0x5c>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000408 <SwitchInit+0x5c>)
 80003ce:	f023 0303 	bic.w	r3, r3, #3
 80003d2:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
    EXTI->FTSR |= BV(SWITCH_EXTI);
 80003d4:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <SwitchInit+0x60>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a0c      	ldr	r2, [pc, #48]	@ (800040c <SwitchInit+0x60>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
    EXTI->IMR |= BV(SWITCH_EXTI);
 80003e0:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <SwitchInit+0x60>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a09      	ldr	r2, [pc, #36]	@ (800040c <SwitchInit+0x60>)
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx) -- EXTI0 --> EXTICR1[3:0] = 0000
    SYSCFG->EXTICR[0] &= ~(BV(3)|BV(2)|BV(1)|BV(0));
 80003ec:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <SwitchInit+0x64>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a07      	ldr	r2, [pc, #28]	@ (8000410 <SwitchInit+0x64>)
 80003f2:	f023 030f 	bic.w	r3, r3, #15
 80003f6:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
    NVIC_EnableIRQ(EXTI0_IRQn); // EXTI0_IRQn
 80003f8:	2006      	movs	r0, #6
 80003fa:	f7ff ffbb 	bl	8000374 <__NVIC_EnableIRQ>
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	40013c00 	.word	0x40013c00
 8000410:	40013800 	.word	0x40013800

08000414 <EXTI0_IRQHandler>:
// Global SwitchExtiFlag
volatile uint32_t SwitchExtiFlag = 0;

// intr handler(ISR) written with exactly same name as of handler fn name in vector table.
// it overrides the WEAK function written in startup.S
void EXTI0_IRQHandler(void) {
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	// acknowledge the interrupt
	EXTI->PR |= BV(SWITCH_EXTI);
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <EXTI0_IRQHandler+0x20>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a05      	ldr	r2, [pc, #20]	@ (8000434 <EXTI0_IRQHandler+0x20>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6153      	str	r3, [r2, #20]
	// interrupt handling logic
	// bad programming practice -- to write a code that take long time to execute (blocking code)
	//LedBlink(LED_BLUE_PIN, 1000);
	// bad programming practice -- non-blocking code
	SwitchExtiFlag = 1;
 8000424:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <EXTI0_IRQHandler+0x24>)
 8000426:	2201      	movs	r2, #1
 8000428:	601a      	str	r2, [r3, #0]
	/*
	LDR r8, =SwitchExtiFlag 	// r8 = &SwitchExtiFlag;
	MOV r1, #1					// r1 = 1;
	STR r1, [r8]				// *r8 = r1;
	*/
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40013c00 	.word	0x40013c00
 8000438:	20000020 	.word	0x20000020

0800043c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000440:	f000 f802 	bl	8000448 <DWT_Init>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800044c:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <DWT_Init+0x58>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a13      	ldr	r2, [pc, #76]	@ (80004a0 <DWT_Init+0x58>)
 8000452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000456:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <DWT_Init+0x58>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a10      	ldr	r2, [pc, #64]	@ (80004a0 <DWT_Init+0x58>)
 800045e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000462:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <DWT_Init+0x5c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <DWT_Init+0x5c>)
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <DWT_Init+0x5c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0b      	ldr	r2, [pc, #44]	@ (80004a4 <DWT_Init+0x5c>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <DWT_Init+0x5c>)
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000482:	bf00      	nop
    __ASM volatile ("NOP");
 8000484:	bf00      	nop
    __ASM volatile ("NOP");
 8000486:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <DWT_Init+0x5c>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b00      	cmp	r3, #0
 800048e:	bf0c      	ite	eq
 8000490:	2301      	moveq	r3, #1
 8000492:	2300      	movne	r3, #0
 8000494:	b2db      	uxtb	r3, r3
}
 8000496:	4618      	mov	r0, r3
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000edf0 	.word	0xe000edf0
 80004a4:	e0001000 	.word	0xe0001000

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f7ff ffc6 	bl	800043c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	@ (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	@ (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	@ (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff fe9d 	bl	8000218 <main>

080004de <LoopForever>:

LoopForever:
  b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ec:	08000564 	.word	0x08000564
  ldr r2, =_sbss
 80004f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f4:	20000024 	.word	0x20000024

080004f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	@ (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	@ (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	@ (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800055c 	.word	0x0800055c
 8000538:	0800055c 	.word	0x0800055c
 800053c:	0800055c 	.word	0x0800055c
 8000540:	08000560 	.word	0x08000560

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
